{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\src\\\\view\\\\pdfextractor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PDFExtractor = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [totalPages, setTotalPages] = useState(0);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    setFile(selectedFile);\n    if (selectedFile) {\n      fetchPdfDetails(selectedFile);\n    }\n  };\n  const fetchPdfDetails = file => {\n    const formData = new FormData();\n    formData.append('pdfFile', file);\n    fetch('/pdf-details', {\n      method: 'POST',\n      body: formData\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch PDF details.');\n      }\n      return response.json();\n    }).then(data => {\n      setTotalPages(data.totalPages);\n    }).catch(error => {\n      console.error('PDF details fetch error:', error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Failed to fetch PDF details',\n        text: error.message\n      });\n    });\n  };\n  const handleCheckboxChange = event => {\n    const selectedPage = parseInt(event.target.value);\n    if (event.target.checked) {\n      setSelectedPages([...selectedPages, selectedPage]);\n    } else {\n      setSelectedPages(selectedPages.filter(page => page !== selectedPage));\n    }\n  };\n  const handlePDFExtraction = () => {\n    if (selectedPages.length > 0) {\n      const fileName = file.name;\n      fetch('/extract', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selectedPages: selectedPages.join(','),\n          fileName: fileName\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.blob();\n        } else {\n          throw new Error('Failed to extract PDF.');\n        }\n      }).then(blob => {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        a.remove();\n        Swal.fire({\n          icon: 'success',\n          title: 'Success!',\n          text: 'PDF Extracted successfully.'\n        });\n      }).catch(error => {\n        console.error('Extraction error:', error);\n        alert('Failed to extract PDF.');\n      });\n    } else {\n      alert('Please select at least one page.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"pdfUploadForm\",\n      onSubmit: event => event.preventDefault(),\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"pdfFile\",\n        onChange: handleFileChange,\n        accept: \".pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), totalPages > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n        id: \"pdfViewer\",\n        title: \"PDF Viewer\",\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"pageContainer\",\n        children: Array.from({\n          length: totalPages\n        }, (_, index) => index + 1).map(pageNumber => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: `page${pageNumber}`,\n            value: pageNumber,\n            onChange: handleCheckboxChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `page${pageNumber}`,\n            children: [\"Page \", pageNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, pageNumber, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"extractPagesBtn\",\n        onClick: handlePDFExtraction,\n        children: \"Extract Pages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(PDFExtractor, \"7u5RzrOFWpB+Roe8Lsh4YhaJ3NE=\");\n_c = PDFExtractor;\nexport default PDFExtractor;\nvar _c;\n$RefreshReg$(_c, \"PDFExtractor\");","map":{"version":3,"names":["React","useState","Swal","jsxDEV","_jsxDEV","Fragment","_Fragment","PDFExtractor","_s","file","setFile","totalPages","setTotalPages","selectedPages","setSelectedPages","handleFileChange","event","selectedFile","target","files","fetchPdfDetails","formData","FormData","append","fetch","method","body","then","response","ok","Error","json","data","catch","error","console","fire","icon","title","text","message","handleCheckboxChange","selectedPage","parseInt","value","checked","filter","page","handlePDFExtraction","length","fileName","name","headers","JSON","stringify","join","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","revokeObjectURL","remove","alert","children","id","onSubmit","preventDefault","type","onChange","accept","_jsxFileName","lineNumber","columnNumber","style","display","Array","from","_","index","map","pageNumber","htmlFor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/src/view/pdfextractor.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst PDFExtractor = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [selectedPages, setSelectedPages] = useState([]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    setFile(selectedFile);\r\n    if (selectedFile) {\r\n      fetchPdfDetails(selectedFile);\r\n    }\r\n  };\r\n  const fetchPdfDetails = (file) => {\r\n    const formData = new FormData();\r\n    formData.append('pdfFile', file);\r\n  \r\n    fetch('/pdf-details', {\r\n      method: 'POST',\r\n      body: formData\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch PDF details.');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      setTotalPages(data.totalPages);\r\n    })\r\n    .catch(error => {\r\n      console.error('PDF details fetch error:', error);\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Failed to fetch PDF details',\r\n        text: error.message\r\n      });\r\n    });\r\n  };\r\n  \r\n  const handleCheckboxChange = (event) => {\r\n    const selectedPage = parseInt(event.target.value);\r\n    if (event.target.checked) {\r\n      setSelectedPages([...selectedPages, selectedPage]);\r\n    } else {\r\n      setSelectedPages(selectedPages.filter(page => page !== selectedPage));\r\n    }\r\n  };\r\n\r\n  const handlePDFExtraction = () => {\r\n    if (selectedPages.length > 0) {\r\n      const fileName = file.name;\r\n      fetch('/extract', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ selectedPages: selectedPages.join(','), fileName: fileName })\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.blob();\r\n        } else {\r\n          throw new Error('Failed to extract PDF.');\r\n        }\r\n      })\r\n      .then(blob => {\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = fileName;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n        a.remove();\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Success!',\r\n          text: 'PDF Extracted successfully.'\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error('Extraction error:', error);\r\n        alert('Failed to extract PDF.');\r\n      });\r\n    } else {\r\n      alert('Please select at least one page.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form id=\"pdfUploadForm\" onSubmit={(event) => event.preventDefault()}>\r\n        <input type=\"file\" id=\"pdfFile\" onChange={handleFileChange} accept=\".pdf\" />\r\n      </form>\r\n      {totalPages > 0 && (\r\n        <>\r\n          <iframe id=\"pdfViewer\" title=\"PDF Viewer\" style={{ display: 'none' }}></iframe>\r\n          <div id=\"pageContainer\">\r\n            {Array.from({ length: totalPages }, (_, index) => index + 1).map((pageNumber) => (\r\n              <div key={pageNumber}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={`page${pageNumber}`}\r\n                  value={pageNumber}\r\n                  onChange={handleCheckboxChange}\r\n                />\r\n                <label htmlFor={`page${pageNumber}`}>Page {pageNumber}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button id=\"extractPagesBtn\" onClick={handlePDFExtraction}>Extract Pages</button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PDFExtractor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}