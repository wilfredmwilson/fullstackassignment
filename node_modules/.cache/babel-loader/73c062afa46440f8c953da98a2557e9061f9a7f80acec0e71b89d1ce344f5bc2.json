{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\src\\\\view\\\\pdfextractor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PDFExtractor = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [totalPages, setTotalPages] = useState(0);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    setFile(selectedFile);\n    if (selectedFile) {\n      displayUploadedPDF(selectedFile);\n      fetchPdfDetails(selectedFile.name);\n    }\n  };\n  const displayUploadedPDF = file => {\n    const reader = new FileReader();\n    reader.onload = function (event) {\n      const pdfViewer = document.getElementById('pdfViewer');\n      pdfViewer.src = event.target.result;\n      pdfViewer.style.display = 'block';\n    };\n    reader.readAsDataURL(file);\n  };\n  const fetchPdfDetails = fileName => {\n    fetch(`/pdf-details/${fileName}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch PDF details.');\n      }\n      return response.json();\n    }).then(data => {\n      setTotalPages(data.totalPages);\n      displayCheckboxes(data.totalPages);\n    }).catch(error => {\n      console.error('PDF details fetch error:', error);\n      alert('Failed to fetch PDF details.');\n    });\n  };\n  const displayCheckboxes = totalPages => {\n    const pageContainer = document.getElementById('pageContainer');\n    pageContainer.innerHTML = '';\n    for (let i = 1; i <= totalPages; i++) {\n      const checkbox = document.createElement('input');\n      checkbox.type = 'checkbox';\n      checkbox.id = 'page' + i;\n      checkbox.value = i;\n      checkbox.onChange = handleCheckboxChange;\n      const label = document.createElement('label');\n      label.htmlFor = 'page' + i;\n      label.appendChild(document.createTextNode('Page ' + i));\n      pageContainer.appendChild(checkbox);\n      pageContainer.appendChild(label);\n    }\n    document.getElementById('extractPagesBtn').style.display = 'block';\n    pageContainer.style.display = 'block';\n  };\n  const handleCheckboxChange = event => {\n    const selectedPage = parseInt(event.target.value);\n    if (event.target.checked) {\n      setSelectedPages([...selectedPages, selectedPage]);\n    } else {\n      setSelectedPages(selectedPages.filter(page => page !== selectedPage));\n    }\n  };\n  const handlePDFExtraction = () => {\n    if (selectedPages.length > 0) {\n      const fileName = file.name;\n      fetch('/extract', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          selectedPages: selectedPages.join(','),\n          fileName: fileName\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.blob();\n        } else {\n          throw new Error('Failed to extract PDF.');\n        }\n      }).then(blob => {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        a.remove();\n        Swal.fire({\n          icon: 'success',\n          title: 'Success!',\n          text: 'PDF Extracted successfully.'\n        });\n      }).catch(error => {\n        console.error('Extraction error:', error);\n        alert('Failed to extract PDF.');\n      });\n    } else {\n      alert('Please select at least one page.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"pdfUploadForm\",\n      onSubmit: event => event.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"pdfFile\",\n        onChange: handleFileChange,\n        accept: \".pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      id: \"pdfViewer\",\n      title: \"PDF Viewer\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pageContainer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"extractPagesBtn\",\n      style: {\n        display: 'none'\n      },\n      onClick: handlePDFExtraction,\n      children: \"Extract Pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(PDFExtractor, \"7u5RzrOFWpB+Roe8Lsh4YhaJ3NE=\");\n_c = PDFExtractor;\nexport default PDFExtractor;\nvar _c;\n$RefreshReg$(_c, \"PDFExtractor\");","map":{"version":3,"names":["React","useState","Swal","jsxDEV","_jsxDEV","PDFExtractor","_s","file","setFile","totalPages","setTotalPages","selectedPages","setSelectedPages","handleFileChange","event","selectedFile","target","files","displayUploadedPDF","fetchPdfDetails","name","reader","FileReader","onload","pdfViewer","document","getElementById","src","result","style","display","readAsDataURL","fileName","fetch","then","response","ok","Error","json","data","displayCheckboxes","catch","error","console","alert","pageContainer","innerHTML","i","checkbox","createElement","type","id","value","onChange","handleCheckboxChange","label","htmlFor","appendChild","createTextNode","selectedPage","parseInt","checked","filter","page","handlePDFExtraction","length","method","headers","body","JSON","stringify","join","blob","url","window","URL","createObjectURL","a","href","download","click","revokeObjectURL","remove","fire","icon","title","text","children","onSubmit","preventDefault","accept","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/src/view/pdfextractor.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst PDFExtractor = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [selectedPages, setSelectedPages] = useState([]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    setFile(selectedFile);\r\n    if (selectedFile) {\r\n      displayUploadedPDF(selectedFile);\r\n      fetchPdfDetails(selectedFile.name);\r\n    }\r\n  };\r\n\r\n  const displayUploadedPDF = (file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = function (event) {\r\n      const pdfViewer = document.getElementById('pdfViewer');\r\n      pdfViewer.src = event.target.result;\r\n      pdfViewer.style.display = 'block';\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const fetchPdfDetails = (fileName) => {\r\n    fetch(`/pdf-details/${fileName}`)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch PDF details.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setTotalPages(data.totalPages);\r\n        displayCheckboxes(data.totalPages);\r\n      })\r\n      .catch(error => {\r\n        console.error('PDF details fetch error:', error);\r\n        alert('Failed to fetch PDF details.');\r\n      });\r\n  };\r\n\r\n  const displayCheckboxes = (totalPages) => {\r\n    const pageContainer = document.getElementById('pageContainer');\r\n    pageContainer.innerHTML = '';\r\n\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      const checkbox = document.createElement('input');\r\n      checkbox.type = 'checkbox';\r\n      checkbox.id = 'page' + i;\r\n      checkbox.value = i;\r\n      checkbox.onChange = handleCheckboxChange;\r\n      const label = document.createElement('label');\r\n      label.htmlFor = 'page' + i;\r\n      label.appendChild(document.createTextNode('Page ' + i));\r\n      pageContainer.appendChild(checkbox);\r\n      pageContainer.appendChild(label);\r\n    }\r\n\r\n    document.getElementById('extractPagesBtn').style.display = 'block';\r\n    pageContainer.style.display = 'block';\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const selectedPage = parseInt(event.target.value);\r\n    if (event.target.checked) {\r\n      setSelectedPages([...selectedPages, selectedPage]);\r\n    } else {\r\n      setSelectedPages(selectedPages.filter(page => page !== selectedPage));\r\n    }\r\n  };\r\n\r\n  const handlePDFExtraction = () => {\r\n    if (selectedPages.length > 0) {\r\n      const fileName = file.name;\r\n      fetch('/extract', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ selectedPages: selectedPages.join(','), fileName: fileName })\r\n      })\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.blob();\r\n          } else {\r\n            throw new Error('Failed to extract PDF.');\r\n          }\r\n        })\r\n        .then(blob => {\r\n          const url = window.URL.createObjectURL(blob);\r\n          const a = document.createElement('a');\r\n          a.href = url;\r\n          a.download = fileName;\r\n          document.body.appendChild(a);\r\n          a.click();\r\n          window.URL.revokeObjectURL(url);\r\n          a.remove();\r\n          Swal.fire({\r\n            icon: 'success',\r\n            title: 'Success!',\r\n            text: 'PDF Extracted successfully.'\r\n          });\r\n        })\r\n        .catch(error => {\r\n          console.error('Extraction error:', error);\r\n          alert('Failed to extract PDF.');\r\n        });\r\n    } else {\r\n      alert('Please select at least one page.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form id=\"pdfUploadForm\" onSubmit={(event) => event.preventDefault()}>\r\n        <input type=\"file\" id=\"pdfFile\" onChange={handleFileChange} accept=\".pdf\" />\r\n        <button type=\"submit\">Upload</button>\r\n      </form>\r\n      <iframe id=\"pdfViewer\" title=\"PDF Viewer\" style={{ display: 'none' }}></iframe>\r\n      <div id=\"pageContainer\"></div>\r\n      <button id=\"extractPagesBtn\" style={{ display: 'none' }} onClick={handlePDFExtraction}>Extract Pages</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PDFExtractor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}