{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\src\\\\view\\\\pdfextractor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PDFExtractor = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [totalPages, setTotalPages] = useState(0);\n  const [selectedPages, setSelectedPages] = useState([]);\n  const handleFileChange = event => {\n    const selectedFile = event.target.files[0];\n    setFile(selectedFile);\n  };\n  const handleUpload = async event => {\n    event.preventDefault();\n    if (!file) {\n      alert('Please select a PDF file.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('pdfFile', file); // Append the file with key 'pdfFile'\n\n    try {\n      const response = await fetch('/upload', {\n        // Ensure the endpoint is correct\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upload PDF.');\n      }\n      Swal.fire('PDF uploaded successfully.');\n      const fileName = file.name;\n      fetchPdfDetails(fileName);\n    } catch (error) {\n      console.error('Upload error:', error);\n      Swal.fire('Failed to upload PDF.');\n    }\n  };\n  const fetchPdfDetails = fileName => {\n    fetch(`/pdf-details/${fileName}`) // Ensure the endpoint is correct\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch PDF details.');\n      }\n      return response.json();\n    }).then(data => {\n      setTotalPages(data.totalPages);\n    }).catch(error => {\n      console.error('PDF details fetch error:', error);\n      Swal.fire('Failed to fetch PDF details.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"pdfUploadForm\",\n      encType: \"multipart/form-data\",\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"pdfFile\",\n        accept: \".pdf\",\n        required: true,\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      id: \"pdfViewer\",\n      style: {\n        display: 'none'\n      },\n      width: \"30%\",\n      height: \"400px\",\n      frameBorder: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pageContainer\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"extractPagesBtn\",\n      style: {\n        display: 'none'\n      },\n      children: \"Extract Selected Pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"downloadLink\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(PDFExtractor, \"7u5RzrOFWpB+Roe8Lsh4YhaJ3NE=\");\n_c = PDFExtractor;\nexport default PDFExtractor;\nvar _c;\n$RefreshReg$(_c, \"PDFExtractor\");","map":{"version":3,"names":["React","useState","Swal","jsxDEV","_jsxDEV","PDFExtractor","_s","file","setFile","totalPages","setTotalPages","selectedPages","setSelectedPages","handleFileChange","event","selectedFile","target","files","handleUpload","preventDefault","alert","formData","FormData","append","response","fetch","method","body","ok","Error","fire","fileName","name","fetchPdfDetails","error","console","then","json","data","catch","children","id","encType","onSubmit","type","accept","required","onChange","_jsxFileName","lineNumber","columnNumber","style","display","width","height","frameBorder","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/src/view/pdfextractor.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst PDFExtractor = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [selectedPages, setSelectedPages] = useState([]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    setFile(selectedFile);\r\n  };\r\n\r\n  const handleUpload = async (event) => {\r\n    event.preventDefault();\r\n    if (!file) {\r\n      alert('Please select a PDF file.');\r\n      return;\r\n    }\r\n  \r\n    const formData = new FormData();\r\n    formData.append('pdfFile', file); // Append the file with key 'pdfFile'\r\n  \r\n    try {\r\n      const response = await fetch('/upload', { // Ensure the endpoint is correct\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to upload PDF.');\r\n      }\r\n  \r\n      Swal.fire('PDF uploaded successfully.');\r\n      const fileName = file.name;\r\n      fetchPdfDetails(fileName);\r\n    } catch (error) {\r\n      console.error('Upload error:', error);\r\n      Swal.fire('Failed to upload PDF.');\r\n    }\r\n  };\r\n\r\n  const fetchPdfDetails = (fileName) => {\r\n    fetch(`/pdf-details/${fileName}`) // Ensure the endpoint is correct\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch PDF details.');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setTotalPages(data.totalPages);\r\n      })\r\n      .catch(error => {\r\n        console.error('PDF details fetch error:', error);\r\n        Swal.fire('Failed to fetch PDF details.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form id=\"pdfUploadForm\" encType=\"multipart/form-data\" onSubmit={handleUpload}>\r\n        <input type=\"file\" id=\"pdfFile\" accept=\".pdf\" required onChange={handleFileChange} />\r\n        <button type=\"submit\">Upload PDF</button>\r\n      </form>\r\n      <iframe id=\"pdfViewer\" style={{ display: 'none' }} width=\"30%\" height=\"400px\" frameBorder=\"0\"></iframe>\r\n      <div id=\"pageContainer\" style={{ display: 'none' }}></div>\r\n      <button id=\"extractPagesBtn\" style={{ display: 'none' }}>Extract Selected Pages</button>\r\n      <div id=\"downloadLink\" style={{ display: 'none' }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PDFExtractor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}